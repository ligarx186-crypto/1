"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: () => (/* binding */ apiService)\n/* harmony export */ });\n// Optimized PHP Backend API Service with Telegram Authentication\nconst API_BASE_URL = '/backend/api.php';\nclass APIService {\n    setAuthKey(authKey) {\n        this.authKey = authKey;\n    }\n    setTelegramInitData(initData) {\n        this.telegramInitData = initData;\n    }\n    async request(endpoint) {\n        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        const url = \"\".concat(API_BASE_URL, \"?path=\").concat(encodeURIComponent(endpoint));\n        const headers = {\n            'Content-Type': 'application/json',\n            'X-Auth-Key': this.authKey,\n            'X-Telegram-Init-Data': this.telegramInitData,\n            'X-Ref-Id': this.getUrlParam('ref') || '',\n            'X-Ref-Auth': this.getUrlParam('refauth') || '',\n            ...options.headers\n        };\n        try {\n            const response = await fetch(url, {\n                ...options,\n                headers,\n                mode: 'cors'\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                throw new Error(\"HTTP \".concat(response.status, \": \").concat(errorText));\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"API Request failed for \".concat(endpoint, \":\"), error);\n            throw error;\n        }\n    }\n    getUrlParam(name) {\n        if (false) {}\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get(name) || '';\n    }\n    // Authentication with Telegram validation\n    async authenticate(userData) {\n        return this.request('auth', {\n            method: 'POST',\n            body: JSON.stringify(userData)\n        });\n    }\n    // User operations\n    async getUser(userId) {\n        return this.request(\"user&userId=\".concat(userId));\n    }\n    async updateUser(userId, userData) {\n        return this.request(\"user&userId=\".concat(userId), {\n            method: 'PUT',\n            body: JSON.stringify(userData)\n        });\n    }\n    // Fast mining status check without auth\n    async getMiningStatus(userId) {\n        return this.request(\"mining-status&userId=\".concat(userId));\n    }\n    // Start mining\n    async startMining(userId) {\n        return this.request(\"user&userId=\".concat(userId), {\n            method: 'PUT',\n            body: JSON.stringify({\n                startMining: true\n            })\n        });\n    }\n    // Claim mining rewards\n    async claimMining(userId) {\n        return this.request(\"user&userId=\".concat(userId), {\n            method: 'PUT',\n            body: JSON.stringify({\n                claimMining: true\n            })\n        });\n    }\n    // Upgrade boost\n    async upgradeBoost(userId, boostType) {\n        return this.request(\"user&userId=\".concat(userId), {\n            method: 'PUT',\n            body: JSON.stringify({\n                upgradeBoost: boostType\n            })\n        });\n    }\n    // Mission operations\n    async getMissions() {\n        return this.request('missions');\n    }\n    async getUserMissions(userId) {\n        return this.request(\"user-missions&userId=\".concat(userId));\n    }\n    async updateUserMission(userId, missionId, missionData) {\n        return this.request(\"user-missions&userId=\".concat(userId), {\n            method: 'PUT',\n            body: JSON.stringify({\n                missionId,\n                missionData\n            })\n        });\n    }\n    // Referral operations\n    async getReferralData(userId) {\n        return this.request(\"referrals&userId=\".concat(userId));\n    }\n    // Conversion operations\n    async getUserConversions(userId) {\n        return this.request(\"conversions&userId=\".concat(userId));\n    }\n    async createConversion(userId, conversionData) {\n        return this.request(\"conversions&userId=\".concat(userId), {\n            method: 'POST',\n            body: JSON.stringify(conversionData)\n        });\n    }\n    // Config operations\n    async getConfig() {\n        return this.request('config');\n    }\n    async getBotUsername() {\n        const config = await this.getConfig();\n        return config.bot_username || 'tanga';\n    }\n    async getBannerUrl() {\n        const config = await this.getConfig();\n        return config.banner_url || 'https://mining-master.onrender.com//assets/banner-BH8QO14f.png';\n    }\n    // Wallet operations\n    async getWalletCategories() {\n        return this.request('wallet-categories');\n    }\n    // Leaderboard operations\n    async getGlobalLeaderboard() {\n        let type = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'balance';\n        return this.request(\"leaderboard&type=\".concat(type));\n    }\n    async getLeaderboard() {\n        const referrals = await this.request('referrals');\n        return Object.entries(referrals).map((param)=>{\n            let [id, data] = param;\n            return {\n                id,\n                count: data.count || 0,\n                earned: data.totalUC || 0,\n                user: {\n                    firstName: data.firstName || 'User'\n                }\n            };\n        }).sort((a, b)=>b.count - a.count).slice(0, 100);\n    }\n    // Telegram verification\n    async verifyTelegramMembership(userId, channelId) {\n        return this.request(\"verify-telegram&userId=\".concat(userId, \"&channelId=\").concat(encodeURIComponent(channelId)));\n    }\n    // Promo code submission\n    async submitPromoCode(userId, code) {\n        return this.request(\"submit-promo-code&userId=\".concat(userId), {\n            method: 'POST',\n            body: JSON.stringify({\n                code\n            })\n        });\n    }\n    constructor(){\n        this.authKey = '';\n        this.telegramInitData = '';\n    }\n}\nconst apiService = new APIService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});