"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/game-logic.ts":
/*!***************************!*\
  !*** ./lib/game-logic.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GAME_CONFIG: () => (/* binding */ GAME_CONFIG),\n/* harmony export */   gameLogic: () => (/* binding */ gameLogic)\n/* harmony export */ });\n// Updated game config for DRX mining system\nconst GAME_CONFIG = {\n    REFERRAL_BONUS: 200,\n    BASE_MINING_RATE: 0.001,\n    WELCOME_BONUS: 100,\n    MIN_CLAIM_TIME: 1800,\n    MAX_MINING_TIME: 1800,\n    MIN_CLAIM_INTERVAL: 300,\n    MINING_SPEED_MULTIPLIER: 1.2,\n    CLAIM_TIME_REDUCTION: 60,\n    MINING_RATE_MULTIPLIER: 1.5,\n    BASE_XP_REWARD: 30,\n    DAILY_MINING_REWARD: 50\n};\nconst gameLogic = {\n    calculateMiningRewards (user, miningDuration) {\n        const baseRate = user.miningRate || GAME_CONFIG.BASE_MINING_RATE;\n        let earned = baseRate * miningDuration // duration in seconds\n        ;\n        let type = \"normal\";\n        // Calculate XP based on mining duration (30 minutes = 30 XP base)\n        let xp = Math.floor(miningDuration / 1800 * GAME_CONFIG.BASE_XP_REWARD) // 1800 seconds = 30 minutes\n        ;\n        // Apply boost multipliers to XP\n        const miningSpeedMultiplier = user.boosts.miningSpeedLevel || 1;\n        const miningRateMultiplier = user.boosts.miningRateLevel || 1;\n        xp = Math.floor(xp * Math.max(miningSpeedMultiplier, miningRateMultiplier) * 0.5);\n        // Bonus for maximum mining time (30 minutes)\n        if (miningDuration >= GAME_CONFIG.MAX_MINING_TIME) {\n            earned += GAME_CONFIG.DAILY_MINING_REWARD;\n            xp += 100 // Bonus XP for max mining\n            ;\n            type = \"bonus\";\n        }\n        return {\n            earned,\n            type,\n            xp\n        };\n    },\n    calculateLevel (xp) {\n        let level = 1;\n        let remainingXP = xp;\n        let totalXPNeeded = 0;\n        while(remainingXP >= this.getXpForLevel(level)){\n            const xpForThisLevel = this.getXpForLevel(level);\n            remainingXP -= xpForThisLevel;\n            totalXPNeeded += xpForThisLevel;\n            level++;\n        }\n        return {\n            level,\n            currentXP: remainingXP,\n            xpForNext: this.getXpForLevel(level)\n        };\n    },\n    getXpForLevel (level) {\n        if (level === 1) return 100;\n        return 100 + (level - 1) * 50;\n    },\n    calculateRank (totalEarned) {\n        var _ranks_;\n        const ranks = [\n            {\n                threshold: 0,\n                title: \"Rookie Miner\",\n                icon: \"ü•â\"\n            },\n            {\n                threshold: 1000,\n                title: \"Bronze Miner\",\n                icon: \"ü•â\"\n            },\n            {\n                threshold: 5000,\n                title: \"Silver Miner\",\n                icon: \"ü•à\"\n            },\n            {\n                threshold: 15000,\n                title: \"Gold Miner\",\n                icon: \"ü•á\"\n            },\n            {\n                threshold: 50000,\n                title: \"Platinum Miner\",\n                icon: \"üíé\"\n            },\n            {\n                threshold: 150000,\n                title: \"Diamond Miner\",\n                icon: \"üíé\"\n            },\n            {\n                threshold: 500000,\n                title: \"Master Miner\",\n                icon: \"üëë\"\n            },\n            {\n                threshold: 1500000,\n                title: \"Grandmaster Miner\",\n                icon: \"üëë\"\n            },\n            {\n                threshold: 5000000,\n                title: \"Legend Miner\",\n                icon: \"üèÜ\"\n            },\n            {\n                threshold: 15000000,\n                title: \"Mythical Miner\",\n                icon: \"‚≠ê\"\n            },\n            {\n                threshold: 50000000,\n                title: \"Ultimate Miner\",\n                icon: \"üåü\"\n            }\n        ];\n        let currentRank = 1;\n        let currentTitle = ranks[0].title;\n        let currentIcon = ranks[0].icon;\n        let nextRankAt = ((_ranks_ = ranks[1]) === null || _ranks_ === void 0 ? void 0 : _ranks_.threshold) || 0;\n        for(let i = 0; i < ranks.length; i++){\n            if (totalEarned >= ranks[i].threshold) {\n                var _ranks_1;\n                currentRank = i + 1;\n                currentTitle = ranks[i].title;\n                currentIcon = ranks[i].icon;\n                nextRankAt = ((_ranks_1 = ranks[i + 1]) === null || _ranks_1 === void 0 ? void 0 : _ranks_1.threshold) || ranks[i].threshold;\n            } else {\n                break;\n            }\n        }\n        return {\n            rank: currentRank,\n            title: currentTitle,\n            nextRankAt,\n            icon: currentIcon\n        };\n    },\n    getBoostCost (boostType, currentLevel) {\n        const baseCosts = {\n            miningSpeed: 100,\n            claimTime: 150,\n            miningRate: 200\n        };\n        const baseCost = baseCosts[boostType];\n        return Math.floor(baseCost * Math.pow(1.5, Math.max(0, currentLevel - 1)));\n    },\n    getNextBoostValue (boostType, currentLevel, user) {\n        switch(boostType){\n            case \"miningSpeed\":\n                const nextSpeedMultiplier = Math.pow(GAME_CONFIG.MINING_SPEED_MULTIPLIER, currentLevel);\n                return \"\".concat(nextSpeedMultiplier.toFixed(1), \"x\");\n            case \"claimTime\":\n                const nextTime = Math.max(300, GAME_CONFIG.MIN_CLAIM_TIME - GAME_CONFIG.CLAIM_TIME_REDUCTION * currentLevel);\n                return this.formatTime(nextTime);\n            case \"miningRate\":\n                const nextRateMultiplier = Math.pow(GAME_CONFIG.MINING_RATE_MULTIPLIER, currentLevel);\n                const nextRate = GAME_CONFIG.BASE_MINING_RATE * nextRateMultiplier;\n                return \"\".concat(this.formatNumberPrecise(nextRate), \"/s\");\n            default:\n                return \"Unknown\";\n        }\n    },\n    formatNumber (num) {\n        const safeNum = typeof num === \"number\" && !isNaN(num) ? num : 0;\n        if (safeNum >= 1000000000) {\n            return Math.floor(safeNum / 1000000000) + \"B\";\n        } else if (safeNum >= 1000000) {\n            return Math.floor(safeNum / 1000000) + \"M\";\n        } else if (safeNum >= 1000) {\n            return Math.floor(safeNum / 1000) + \"K\";\n        }\n        return Math.floor(safeNum).toString();\n    },\n    formatNumberPrecise (num) {\n        const safeNum = typeof num === \"number\" && !isNaN(num) ? num : 0;\n        if (safeNum === 0) return \"0\";\n        if (safeNum >= 1) return safeNum.toFixed(3).replace(/\\.?0+$/, \"\");\n        return safeNum.toFixed(6).replace(/\\.?0+$/, \"\");\n    },\n    formatTime (seconds) {\n        const safeSeconds = typeof seconds === \"number\" && !isNaN(seconds) ? Math.floor(seconds) : 0;\n        const hours = Math.floor(safeSeconds / 3600);\n        const minutes = Math.floor(safeSeconds % 3600 / 60);\n        const secs = safeSeconds % 60;\n        if (hours > 0) {\n            return \"\".concat(hours.toString().padStart(2, '0'), \":\").concat(minutes.toString().padStart(2, '0'), \":\").concat(secs.toString().padStart(2, '0'));\n        } else {\n            return \"\".concat(minutes.toString().padStart(2, '0'), \":\").concat(secs.toString().padStart(2, '0'));\n        }\n    },\n    canClaimMining (user) {\n        if (!user.isMining || !user.miningStartTime) return false;\n        const now = Date.now();\n        const miningDuration = Math.floor((now - user.miningStartTime) / 1000);\n        const timeSinceLastClaim = Math.floor((now - (user.lastClaimTime || 0)) / 1000);\n        return miningDuration >= (user.minClaimTime || GAME_CONFIG.MIN_CLAIM_TIME) && timeSinceLastClaim >= GAME_CONFIG.MIN_CLAIM_INTERVAL;\n    },\n    getMiningDuration (user) {\n        if (!user.isMining || !user.miningStartTime) return 0;\n        const now = Date.now();\n        return Math.floor((now - user.miningStartTime) / 1000);\n    },\n    calculatePendingRewards (user) {\n        const duration = this.getMiningDuration(user);\n        if (duration === 0) return 0;\n        // Apply mining time limits (30 minutes max)\n        const limitedDuration = Math.min(duration, GAME_CONFIG.MAX_MINING_TIME);\n        const { earned } = this.calculateMiningRewards(user, limitedDuration);\n        return earned;\n    },\n    getRemainingClaimTime (user) {\n        if (!user.isMining || !user.miningStartTime) return 0;\n        const now = Date.now();\n        const miningDuration = Math.floor((now - user.miningStartTime) / 1000);\n        const minTime = user.minClaimTime || GAME_CONFIG.MIN_CLAIM_TIME;\n        return Math.max(0, minTime - miningDuration);\n    },\n    getClaimCooldown (user) {\n        if (!user.lastClaimTime) return 0;\n        const now = Date.now();\n        const timeSinceLastClaim = Math.floor((now - user.lastClaimTime) / 1000);\n        return Math.max(0, GAME_CONFIG.MIN_CLAIM_INTERVAL - timeSinceLastClaim);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/game-logic.ts\n"));

/***/ })

});